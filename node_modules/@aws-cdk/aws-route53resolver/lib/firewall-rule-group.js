"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirewallRuleGroup = exports.DnsBlockResponse = exports.FirewallRuleAction = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("@aws-cdk/core");
const firewall_rule_group_association_1 = require("./firewall-rule-group-association");
const route53resolver_generated_1 = require("./route53resolver.generated");
/**
 * A Firewall Rule
 */
class FirewallRuleAction {
    /**
     * Permit the request to go through
     */
    static allow() {
        return { action: 'ALLOW' };
    }
    /**
     * Permit the request to go through but send an alert to the logs
     */
    static alert() {
        return { action: 'ALERT' };
    }
    /**
     * Disallow the request
     *
     * @param [response=DnsBlockResponse.noData()] The way that you want DNS Firewall to block the request
     */
    static block(response) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_route53resolver_DnsBlockResponse(response);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.block);
            }
            throw error;
        }
        return {
            action: 'BLOCK',
            blockResponse: response ?? DnsBlockResponse.noData(),
        };
    }
}
exports.FirewallRuleAction = FirewallRuleAction;
_a = JSII_RTTI_SYMBOL_1;
FirewallRuleAction[_a] = { fqn: "@aws-cdk/aws-route53resolver.FirewallRuleAction", version: "1.204.0" };
/**
 * The way that you want DNS Firewall to block the request
 */
class DnsBlockResponse {
    /**
     * Respond indicating that the query was successful, but no
     * response is available for it.
     */
    static noData() {
        return { blockResponse: 'NODATA' };
    }
    /**
     * Respond indicating that the domain name that's in the query
     * doesn't exist.
     */
    static nxDomain() {
        return { blockResponse: 'NXDOMAIN' };
    }
    /**
     * Provides a custom override response to the query
     *
     * @param domain The custom DNS record to send back in response to the query
     * @param [ttl=0] The recommended amount of time for the DNS resolver or
     *   web browser to cache the provided override record
     */
    static override(domain, ttl) {
        return {
            blockResponse: 'OVERRIDE',
            blockOverrideDnsType: 'CNAME',
            blockOverrideDomain: domain,
            blockOverrideTtl: ttl ?? core_1.Duration.seconds(0),
        };
    }
}
exports.DnsBlockResponse = DnsBlockResponse;
_b = JSII_RTTI_SYMBOL_1;
DnsBlockResponse[_b] = { fqn: "@aws-cdk/aws-route53resolver.DnsBlockResponse", version: "1.204.0" };
/**
 * A Firewall Rule Group
 */
class FirewallRuleGroup extends core_1.Resource {
    constructor(scope, id, props = {}) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_route53resolver_FirewallRuleGroupProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, FirewallRuleGroup);
            }
            throw error;
        }
        this.rules = props.rules ?? [];
        const ruleGroup = new route53resolver_generated_1.CfnFirewallRuleGroup(this, 'Resource', {
            name: props.name,
            firewallRules: core_1.Lazy.any({ produce: () => this.rules.map(renderRule) }),
        });
        this.firewallRuleGroupId = ruleGroup.attrId;
        this.firewallRuleGroupArn = ruleGroup.attrArn;
        this.firewallRuleGroupCreationTime = ruleGroup.attrCreationTime;
        this.firewallRuleGroupCreatorRequestId = ruleGroup.attrCreatorRequestId;
        this.firewallRuleGroupModificationTime = ruleGroup.attrModificationTime;
        this.firewallRuleGroupOwnerId = ruleGroup.attrOwnerId;
        this.firewallRuleGroupRuleCount = ruleGroup.attrRuleCount;
        this.firewallRuleGroupShareStatus = ruleGroup.attrShareStatus;
        this.firewallRuleGroupStatus = ruleGroup.attrStatus;
        this.firewallRuleGroupStatusMessage = ruleGroup.attrStatusMessage;
    }
    /**
     * Import an existing Firewall Rule Group
     */
    static fromFirewallRuleGroupId(scope, id, firewallRuleGroupId) {
        class Import extends core_1.Resource {
            constructor() {
                super(...arguments);
                this.firewallRuleGroupId = firewallRuleGroupId;
            }
        }
        return new Import(scope, id);
    }
    /**
     * Adds a rule to this group
     */
    addRule(rule) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_route53resolver_FirewallRule(rule);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addRule);
            }
            throw error;
        }
        this.rules.push(rule);
        return this;
    }
    /**
     * Associates this Firewall Rule Group with a VPC
     */
    associate(id, props) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_route53resolver_FirewallRuleGroupAssociationOptions(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.associate);
            }
            throw error;
        }
        return new firewall_rule_group_association_1.FirewallRuleGroupAssociation(this, id, {
            ...props,
            firewallRuleGroup: this,
        });
    }
}
exports.FirewallRuleGroup = FirewallRuleGroup;
_c = JSII_RTTI_SYMBOL_1;
FirewallRuleGroup[_c] = { fqn: "@aws-cdk/aws-route53resolver.FirewallRuleGroup", version: "1.204.0" };
function renderRule(rule) {
    return {
        action: rule.action.action,
        firewallDomainListId: rule.firewallDomainList.firewallDomainListId,
        priority: rule.priority,
        blockOverrideDnsType: rule.action.blockResponse?.blockOverrideDnsType,
        blockOverrideDomain: rule.action.blockResponse?.blockOverrideDomain,
        blockOverrideTtl: rule.action.blockResponse?.blockOverrideTtl?.toSeconds(),
        blockResponse: rule.action.blockResponse?.blockResponse,
    };
}
//# sourceMappingURL=data:application/json;base64,