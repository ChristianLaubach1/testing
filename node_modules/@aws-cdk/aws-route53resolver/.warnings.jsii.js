function _aws_cdk_aws_route53resolver_IFirewallDomainList(p) {
}
function _aws_cdk_aws_route53resolver_FirewallDomainListProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (!visitedObjects.has(p.domains))
            _aws_cdk_aws_route53resolver_FirewallDomains(p.domains);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_route53resolver_FirewallDomains(p) {
}
function _aws_cdk_aws_route53resolver_DomainsConfig(p) {
}
function _aws_cdk_aws_route53resolver_FirewallDomainList(p) {
}
function _aws_cdk_aws_route53resolver_IFirewallRuleGroup(p) {
}
function _aws_cdk_aws_route53resolver_FirewallRuleGroupProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (p.rules != null)
            for (const o of p.rules)
                if (!visitedObjects.has(o))
                    _aws_cdk_aws_route53resolver_FirewallRule(o);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_route53resolver_FirewallRule(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (!visitedObjects.has(p.action))
            _aws_cdk_aws_route53resolver_FirewallRuleAction(p.action);
        if (!visitedObjects.has(p.firewallDomainList))
            _aws_cdk_aws_route53resolver_IFirewallDomainList(p.firewallDomainList);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_route53resolver_FirewallRuleAction(p) {
}
function _aws_cdk_aws_route53resolver_DnsBlockResponse(p) {
}
function _aws_cdk_aws_route53resolver_FirewallRuleGroup(p) {
}
function _aws_cdk_aws_route53resolver_FirewallRuleGroupAssociationOptions(p) {
}
function _aws_cdk_aws_route53resolver_FirewallRuleGroupAssociationProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (!visitedObjects.has(p.firewallRuleGroup))
            _aws_cdk_aws_route53resolver_IFirewallRuleGroup(p.firewallRuleGroup);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_route53resolver_FirewallRuleGroupAssociation(p) {
}
function _aws_cdk_aws_route53resolver_CfnFirewallDomainListProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (p.tags != null)
            for (const o of p.tags)
                if (!visitedObjects.has(o))
                    require("@aws-cdk/core/.warnings.jsii.js")._aws_cdk_core_CfnTag(o);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_route53resolver_CfnFirewallDomainList(p) {
}
function _aws_cdk_aws_route53resolver_CfnFirewallRuleGroupProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (p.tags != null)
            for (const o of p.tags)
                if (!visitedObjects.has(o))
                    require("@aws-cdk/core/.warnings.jsii.js")._aws_cdk_core_CfnTag(o);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_route53resolver_CfnFirewallRuleGroup(p) {
}
function _aws_cdk_aws_route53resolver_CfnFirewallRuleGroup_FirewallRuleProperty(p) {
}
function _aws_cdk_aws_route53resolver_CfnFirewallRuleGroupAssociationProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (p.tags != null)
            for (const o of p.tags)
                if (!visitedObjects.has(o))
                    require("@aws-cdk/core/.warnings.jsii.js")._aws_cdk_core_CfnTag(o);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_route53resolver_CfnFirewallRuleGroupAssociation(p) {
}
function _aws_cdk_aws_route53resolver_CfnResolverConfigProps(p) {
}
function _aws_cdk_aws_route53resolver_CfnResolverConfig(p) {
}
function _aws_cdk_aws_route53resolver_CfnResolverDNSSECConfigProps(p) {
}
function _aws_cdk_aws_route53resolver_CfnResolverDNSSECConfig(p) {
}
function _aws_cdk_aws_route53resolver_CfnResolverEndpointProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (p.tags != null)
            for (const o of p.tags)
                if (!visitedObjects.has(o))
                    require("@aws-cdk/core/.warnings.jsii.js")._aws_cdk_core_CfnTag(o);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_route53resolver_CfnResolverEndpoint(p) {
}
function _aws_cdk_aws_route53resolver_CfnResolverEndpoint_IpAddressRequestProperty(p) {
}
function _aws_cdk_aws_route53resolver_CfnResolverQueryLoggingConfigProps(p) {
}
function _aws_cdk_aws_route53resolver_CfnResolverQueryLoggingConfig(p) {
}
function _aws_cdk_aws_route53resolver_CfnResolverQueryLoggingConfigAssociationProps(p) {
}
function _aws_cdk_aws_route53resolver_CfnResolverQueryLoggingConfigAssociation(p) {
}
function _aws_cdk_aws_route53resolver_CfnResolverRuleProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    try {
        if (p.tags != null)
            for (const o of p.tags)
                if (!visitedObjects.has(o))
                    require("@aws-cdk/core/.warnings.jsii.js")._aws_cdk_core_CfnTag(o);
    }
    finally {
        visitedObjects.delete(p);
    }
}
function _aws_cdk_aws_route53resolver_CfnResolverRule(p) {
}
function _aws_cdk_aws_route53resolver_CfnResolverRule_TargetAddressProperty(p) {
}
function _aws_cdk_aws_route53resolver_CfnResolverRuleAssociationProps(p) {
}
function _aws_cdk_aws_route53resolver_CfnResolverRuleAssociation(p) {
}
function print(name, deprecationMessage) {
    const deprecated = process.env.JSII_DEPRECATED;
    const deprecationMode = ["warn", "fail", "quiet"].includes(deprecated) ? deprecated : "warn";
    const message = `${name} is deprecated.\n  ${deprecationMessage.trim()}\n  This API will be removed in the next major release.`;
    switch (deprecationMode) {
        case "fail":
            throw new DeprecationError(message);
        case "warn":
            console.warn("[WARNING]", message);
            break;
    }
}
function getPropertyDescriptor(obj, prop) {
    const descriptor = Object.getOwnPropertyDescriptor(obj, prop);
    if (descriptor) {
        return descriptor;
    }
    const proto = Object.getPrototypeOf(obj);
    const prototypeDescriptor = proto && getPropertyDescriptor(proto, prop);
    if (prototypeDescriptor) {
        return prototypeDescriptor;
    }
    return {};
}
const visitedObjects = new Set();
class DeprecationError extends Error {
    constructor(...args) {
        super(...args);
        Object.defineProperty(this, "name", {
            configurable: false,
            enumerable: true,
            value: "DeprecationError",
            writable: false,
        });
    }
}
module.exports = { print, getPropertyDescriptor, DeprecationError, _aws_cdk_aws_route53resolver_IFirewallDomainList, _aws_cdk_aws_route53resolver_FirewallDomainListProps, _aws_cdk_aws_route53resolver_FirewallDomains, _aws_cdk_aws_route53resolver_DomainsConfig, _aws_cdk_aws_route53resolver_FirewallDomainList, _aws_cdk_aws_route53resolver_IFirewallRuleGroup, _aws_cdk_aws_route53resolver_FirewallRuleGroupProps, _aws_cdk_aws_route53resolver_FirewallRule, _aws_cdk_aws_route53resolver_FirewallRuleAction, _aws_cdk_aws_route53resolver_DnsBlockResponse, _aws_cdk_aws_route53resolver_FirewallRuleGroup, _aws_cdk_aws_route53resolver_FirewallRuleGroupAssociationOptions, _aws_cdk_aws_route53resolver_FirewallRuleGroupAssociationProps, _aws_cdk_aws_route53resolver_FirewallRuleGroupAssociation, _aws_cdk_aws_route53resolver_CfnFirewallDomainListProps, _aws_cdk_aws_route53resolver_CfnFirewallDomainList, _aws_cdk_aws_route53resolver_CfnFirewallRuleGroupProps, _aws_cdk_aws_route53resolver_CfnFirewallRuleGroup, _aws_cdk_aws_route53resolver_CfnFirewallRuleGroup_FirewallRuleProperty, _aws_cdk_aws_route53resolver_CfnFirewallRuleGroupAssociationProps, _aws_cdk_aws_route53resolver_CfnFirewallRuleGroupAssociation, _aws_cdk_aws_route53resolver_CfnResolverConfigProps, _aws_cdk_aws_route53resolver_CfnResolverConfig, _aws_cdk_aws_route53resolver_CfnResolverDNSSECConfigProps, _aws_cdk_aws_route53resolver_CfnResolverDNSSECConfig, _aws_cdk_aws_route53resolver_CfnResolverEndpointProps, _aws_cdk_aws_route53resolver_CfnResolverEndpoint, _aws_cdk_aws_route53resolver_CfnResolverEndpoint_IpAddressRequestProperty, _aws_cdk_aws_route53resolver_CfnResolverQueryLoggingConfigProps, _aws_cdk_aws_route53resolver_CfnResolverQueryLoggingConfig, _aws_cdk_aws_route53resolver_CfnResolverQueryLoggingConfigAssociationProps, _aws_cdk_aws_route53resolver_CfnResolverQueryLoggingConfigAssociation, _aws_cdk_aws_route53resolver_CfnResolverRuleProps, _aws_cdk_aws_route53resolver_CfnResolverRule, _aws_cdk_aws_route53resolver_CfnResolverRule_TargetAddressProperty, _aws_cdk_aws_route53resolver_CfnResolverRuleAssociationProps, _aws_cdk_aws_route53resolver_CfnResolverRuleAssociation };
